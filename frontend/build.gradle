buildscript {
    ext.kotlin_version = '1.2.70'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
        }
    }

    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.37'
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin-dce-js'

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/kotlin/kotlin-js-wrappers' }
    maven { url 'http://dl.bintray.com/kotlin/kotlinx.html' }
}

dependencies {
    compile project(":common-js")
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    compile 'org.jetbrains:kotlin-react:16.5.0-pre.54-kotlin-1.2.70',
            'org.jetbrains:kotlin-react-dom:16.5.0-pre.54-kotlin-1.2.70'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:0.26.1'
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
}

kotlinFrontend {
    npm {
        dependency('react', '16.4.2')
        dependency('react-dom', '16.4.2')
        dependency('js-cookie', '2.2.0')
        dependency('jquery', '3.3.1')
        dependency('popper.js', '1.14.4')
        dependency('bootstrap', '4.1.3')
        dependency('style-loader', '0.22.1')
        dependency('css-loader', '1.0.0')
        dependency('react-notifications', '1.4.3')
        dependency('url-loader', '1.1.1')
        dependency('string-replace-loader', '2.1.1')
    }

    webpackBundle {
        bundleName = 'flaxo'
        contentPath = file('src/main/web')
//        mode = 'development'
        mode = 'production'
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task assembleFrontend(type: Copy) {
    dependsOn bundle

    ext.webDir = "$projectDir/src/main/web"
    ext.webpackBundleDir = "$projectDir/build/bundle"
    ext.productionServerDir = "$projectDir/build/dist"

    inputs.dir(webDir)
    inputs.dir(webpackBundleDir)
    outputs.dir(productionServerDir)

    from webDir
    from webpackBundleDir
    into productionServerDir
}

task runFrontend(type: Exec) {
    dependsOn bundle
    dependsOn assembleFrontend

    ext.port = 8088
    dependsOn assembleFrontend
    workingDir "$projectDir/build/dist"
    commandLine "python", "-m", "SimpleHTTPServer", port
}
